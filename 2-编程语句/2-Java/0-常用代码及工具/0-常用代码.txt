0xFF 是计算机十六进制的表示
0xFF的二进制表示就是：1111 1111
将字节转换为16进制
String hex = Integer.toHexString(buf[i] & 0xFF);

0x :表示16进制
0b :表示二进制

//获取字符串的字节长度
System.out.println("1".getBytes().length); //字符串大小为：1个字节长度
System.out.println("中".getBytes().length); //字符串大小为：2个字节长度

查看对象的数据类型
	Object x = "xxx"
	System.out.println(x.getClass().getName());


判断数据类型
	Animal a;
	if(a instanceof Cat){}
	
三目运算
	int a = 0;
	int b = a > 0 ? 1 : 9;

可变长度参数列表[既可变参数可以不填写即getName()]
	String [] args = {"1","2","3"};
	getName(args);
	
	getName("1","2","3");
	getName();
	static void getName(String ... items) {
		for(String x :items) 
			System.out.println(x);				
	}

File 与Path相互转换
	File.toPath()
	Path.toFile()	


获取当前路径	
    # 当前路径\aa\xx.txt
	String currentPath = Paths.get("aa","xx.txt").toAbsolutePath().toString();


数组与list相互转化
	List<String> list = Arrays.asList("1","2","3");		
	String[] s = list.toArray(new String[3]);
	Collections.addAll()
			
日期格式化
	// Date 转 LocalDateTime
	Date startDate = new Date();
	LocalDateTime localDateTime1 = startDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();

	// LocalDateTime 转 Date
	Date date = Date.from(localDateTime1.atZone(ZoneId.systemDefault()).toInstant());

	//日期格式化
	DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
	String dateTimeStr = localDateTime1.format(dateTimeFormatter);
	System.out.println(dateTimeStr);
	

延时5秒
	Thread.sleep( 5 * 1000 );
	TimeUnit.SECONDS.sleep( 5 );


文件过滤	
File ftpdirFile = new File(xmlFileDir);
File[] firstLevelDir = ftpdirFile.listFiles(new FileFilter() {
	@Override
	public boolean accept(File file) {
		// 只接受 数字的文件夹
		return file.isDirectory() && (!file.getName().contains("-"));
	}
});
		


判断对象是否为空
org.apache.commons.lang.StringUtils
StringUtils.isBlank()

判断集合是否为空
org.springframework.util.CollectionUtils
CollectionUtils.isEmpty(queryPageData)

拷贝对象-spring	
	BeanUtils.copyProperties(oldObj, newObj);

文件操作-org.apache.commons.io.FileUtils
FileUtils.copyFile(srcFile, destFile);
	
	
反射
		//用于判断参数类型是否一致（表示Long是不是Number的子类:既将Long转换为Number,失败会抛出ClassCastException）
		Long.class.asSubclass(Number.class);

		//获取对象方法
		Object obj = new Object();
		Method method = obj.getClass().getMethod("wait", Long.TYPE);
		Method[] methods = obj.getClass().getMethods();	
		
		//获取方法中个参数类型，数组的大小表示参数的数量		
		Class[] c = method.getParameterTypes();
		System.out.println("method name: "+method.getName());
		System.out.println("method Parameter Type: "+c[0].getName());
		
		//调用方法，传参数
		Object value = method.invoke(obj, "jiaolong");
		System.out.println(value);
		
		//调用无参数的静态方法
		Method m = MyTest.class.getMethod("m1", null);
		m.invoke(null, null);			
		public class MyTest{
			public static void m1()
				System.out.println("m1");			
		}