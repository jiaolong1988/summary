可变长度参数列表
	getName("1","2","3");
	static void getName(String...items) {
		for(String x :items) 
			System.out.println(x);				
	}

跳出多层循环
	aa:while(true){break:aa}

读取文件
	List<String> rows = Files.readAllLines(Paths.get("D:\\test\\test.sql"));
	System.out.println(rows);

数组与list相互转化
	List<String> list = Arrays.asList("1","2","3");		
	String[] s = list.toArray(new String[3]);
			
日期格式化
	// Date 转 LocalDateTime
	Date startDate = new Date();
	LocalDateTime localDateTime1 = startDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();

	// LocalDateTime 转 Date
	Date date = Date.from(localDateTime1.atZone(ZoneId.systemDefault()).toInstant());

	//日期格式化
	DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
	String dateTimeStr = localDateTime1.format(dateTimeFormatter);
	System.out.println(dateTimeStr);
	
	
反射
		//用于判断参数类型是否一致（表示Long是不是Number的子类:既将Long转换为Number,失败会抛出ClassCastException）
		Long.class.asSubclass(Number.class);

		//获取对象方法
		Object obj = new Object();
		Method method = obj.getClass().getMethod("wait", Long.TYPE);
		Method[] methods = obj.getClass().getMethods();	
		
		//获取方法中个参数类型，数组的大小表示参数的数量		
		Class[] c = method.getParameterTypes();
		System.out.println("method name: "+method.getName());
		System.out.println("method Parameter Type: "+c[0].getName());
		
		//调用方法，传参数
		Object value = method.invoke(obj, "jiaolong");
		System.out.println(value);