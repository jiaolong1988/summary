0xFF 是计算机十六进制的表示
0xFF的二进制表示就是：1111 1111
将字节转换为16进制
String hex = Integer.toHexString(buf[i] & 0xFF);

0x :表示16进制
0b :表示二进制

//获取字符串的字节长度
System.out.println("1".getBytes().length); //字符串大小为：1个字节长度
System.out.println("中".getBytes().length); //字符串大小为：2个字节长度


可变长度参数列表[既可变参数可以不填写即getName()]
	getName("1","2","3");
	static void getName(String...items) {
		for(String x :items) 
			System.out.println(x);				
	}

跳出多层循环
	aa:while(true){break:aa}

判断对象是否为空
org.apache.commons.lang.StringUtils
StringUtils.isBlank()

File 与Path相互转换
	File.toPath()
	Path.toFile()

获取当前路径	
	String currentPath = Paths.get("aa","xx.txt").toAbsolutePath().toString();

读取文件
	List<String> rows = Files.readAllLines(Paths.get("D:\\test\\test.sql"));
	System.out.println(rows);

数组与list相互转化
	List<String> list = Arrays.asList("1","2","3");		
	String[] s = list.toArray(new String[3]);
			
日期格式化
	// Date 转 LocalDateTime
	Date startDate = new Date();
	LocalDateTime localDateTime1 = startDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();

	// LocalDateTime 转 Date
	Date date = Date.from(localDateTime1.atZone(ZoneId.systemDefault()).toInstant());

	//日期格式化
	DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
	String dateTimeStr = localDateTime1.format(dateTimeFormatter);
	System.out.println(dateTimeStr);
	

延时5秒
	Thread.sleep( 5 * 1000 );
	TimeUnit.SECONDS.sleep( 5 );

拷贝对象-spring	
	BeanUtils.copyProperties(oldObj, newObj);

文件操作-org.apache.commons.io.FileUtils
FileUtils.copyFile(srcFile, destFile);
	
交集并集	
	List<String> a = Arrays.asList("1","2","3","4");
	List<String> b = Arrays.asList("3","4","5","6");

	/**
	* 求交集-求同
	*  返回两个集合相同的的元素。
	*  realB.retainAll(realA);返回的相同元素都存放在B集合中
	*/
	Collection<String> realA = new ArrayList<>(a);
	Collection<String> realB = new ArrayList<>(b);		
	realB.retainAll(realA);
	System.out.println("交集结果：" + realB);


	/**
	* 求差集-存异
	* 	删除指定集合中的元素，并返回该集合
	*  bb.removeAll(aa);表示为：删除集合bb中所有aa集合的元素，并返回bb剩余的元素。
	*/
	Collection<String> realC = new ArrayList<>(a);
	Collection<String> realD = new ArrayList<>(b);
	realC.removeAll(realD);
	System.out.println("差集结果：" + realC);
		
		
反射
		//用于判断参数类型是否一致（表示Long是不是Number的子类:既将Long转换为Number,失败会抛出ClassCastException）
		Long.class.asSubclass(Number.class);

		//获取对象方法
		Object obj = new Object();
		Method method = obj.getClass().getMethod("wait", Long.TYPE);
		Method[] methods = obj.getClass().getMethods();	
		
		//获取方法中个参数类型，数组的大小表示参数的数量		
		Class[] c = method.getParameterTypes();
		System.out.println("method name: "+method.getName());
		System.out.println("method Parameter Type: "+c[0].getName());
		
		//调用方法，传参数
		Object value = method.invoke(obj, "jiaolong");
		System.out.println(value);
		
		//调用无参数的静态方法
		Method m = MyTest.class.getMethod("m1", null);
		m.invoke(null, null);			
		public class MyTest{
			public static void m1()
				System.out.println("m1");			
		}