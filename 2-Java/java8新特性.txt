闭包就是能够读取其他函数内部变量的函数。
https://www.cnblogs.com/amcy/p/9912528.html

Lambda表达式，也称为闭包,允许把函数作为一个方法的参数,只能引用标记了 final 的外层局部变量。
语法:(parameters) -> expression
	或
	(parameters) ->{ statements; }
	
	public static Supplier<Integer> testClosure() {
	 int i = 1;
	 return () -> {
		 return i;
	 };
	}


方法引用
方法引用通过方法的名字来指向一个方法。
Class::new                       构造器引用: final Car car = Car.create( Car::new );
Class::static_method
Class::method
instance::method



函数式编程
	String joined = things.stream()
						   .map(Object::toString)
						   .collect(Collectors.joining(", "));
						   
	long count = strings.stream().filter(string->string.isEmpty()).count();
https://docs.oracle.com/javase/8/docs/api/


//当为空时，返回默认值
int value = 2;
Optional<Integer> optional = Optional.ofNullable(value);
Integer nvalue =  optional.orElse(0);

函数式编程案例
https://blog.csdn.net/icarusliu/article/details/79495534


java8 元空间
元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制，但可以通过以下参数来指定元空间的大小。
JDK 8 中永久代向元空间的转换理由：
1、字符串存在永久代中，容易出现性能问题和内存溢出。
2、类及方法的信息等比较难确定其大小，因此对于永久代的大小指定比较困难，太小容易出现永久代溢出，太大则容易导致老年代溢出。
3、永久代会为 GC 带来不必要的复杂度，并且回收效率偏低。

JVM命令
	查看jvm heap的使用情况
	jmap -heap 3580

	查看gc情况
	jstat -gc pid 1000

	查看默认GC
	java -XX:+PrintCommandLineFlags -version

基础知识：
	吞吐量 = CPU在用户应用程序运行的时间 / （CPU在用户应用程序运行的时间 + CPU垃圾回收的时间）
	并发:一个处理器同时处理多个任务。
	并行:多个处理器或者是多核的处理器同时处理多个不同的任务.


Minor GC   发生在年轻代
Major GC   发生在终生代
Full GC    发生在整个Heap

-Xms (initial heap size) 
-Xmx (maximum heap size)
JVM 设置年轻代空间大小
	年轻代
		-XX: NewRatio = 3意味着年轻一代和终身聘用一代之间的比率为1:3。换句话说，eden 和 survivor 空间的总和将是堆总大小的四分之一。
		NewSize 和 MaxNewSize 参数从上下限定了年轻一代的大小。
		幸存者空间
		-XX: SurvivorRatio = 6将 eden 和存者空间之间的比率设置为1:6。换句话说，每个幸存者的空间是伊甸园的六分之一，也就是年轻一代的八分之一

	并行收集器
	-XX:+UseParallelGC     并行执行Major gc,默认开启并行压缩，保持垃圾收集暂停时间较短。
	并发收集器有两种：-XX: + UseConcMarkSweepGC 启用 CMS 收集器或-XX: + UseG1GC 启用 G1收集器。
	
	-XX: ParallelGCThreads = < n > 控制垃圾收集器线程的数量。
		由于多个线程在处理年轻代的的垃圾收集过程中，会存储从年轻代 晋升到 终生代的的数据，因此会造成碎片效应，因此要控制线程数量。
		解决办法：减少垃圾收集器线程的数量、增加终生代大小 将减少碎片效应。
	
收集器选择
	串行收集器
	serilgc：小的数据集(大约100mb)，在单个处理器上运行且没有暂停时间要求。
	
	并行收集器
	ParallelGC：性能是第一优先级，(b)没有暂停时间要求或1秒或更长的暂停时间是可以接受的。
		简介：并行收集器(这里也称为吞吐量收集器)是一个类似于串行收集器的分代收集器; 主要的区别是使用多个线程来加速垃圾收集,将同时执行MinorGc和Major gc,以减少开销。
		条件：用于多处理器机器上。单处理器上ParallelGC 比 serialGC性能要差，因为并行执行需要开销，而且当可用的处理器超过两个时，它通常
		比串行收集器性能要好得多。
		
		优化：
			 -XX:MaxGCPauseMillis=<N> 指定最大暂停时间目标，可能会导致垃圾收集器降低应用程序的总吞吐量，并且不能始终满足所需的暂停时间目标。
			 -XX: GCTimeRatio = < n > 指定，该选项将垃圾收集时间与应用程序时间的比率设置为1/(1 + < n >)。
			 -Xmx < n > 指定最大堆占用空间
			 目标按以下顺序处理:
				最大暂停时间目标
				吞吐量目标


	并发收集器
		简述：响应时间比总吞吐量更重要，垃圾收集暂停时间必须保持在大约1秒以内
			主要性能开销：最明显的开销是在collection的并发部分 期间 使用一个或多个处理器。
		
		
		cms: 有较短垃暂停时间且， 垃圾收集器与 应用程序共享处理器资源。
			Major 收集
				CMS 收集器使用一个或多个垃圾收集器线程，这些线程与应用程序线程同时运行，目的是在终生代满的之前完成对终身生成的收集。
				CMS 收集器在应用程序线程仍在运行的情况下完成大部分跟踪和清理工作。
				
				Concurrent Mode Failure
					如果 CMS 收集器无法在终生代满之前完成回收，那么应用程序将暂停并且收集完成，同时所有应用程序线程停止。此时需要调整cms参数。
			Minor 收集
				Minor收集期间停止应用程序线程.
				
			CMS收集器在并发收集周期中将应用程序暂停两次，
				第一次：从应用程的序线程中标记 statck 与 寄存器 中的活对象。称为初始标记暂停。（CMS 收集器在收集开始时暂停所有应用程序线程）；
				第二次：在heap中如：年轻代 需要存活对象。出现在收集器完成跟踪对象之后。
				
			CMS (并发标记清除)垃圾收集不进行压缩。并行压缩只执行整堆压缩，这会导致相当长的暂停时间。	
			
		g1: 适用大内存的多处理器机器，该算法在满足垃圾收集暂停时间目标的同时，具有较高的概率，同时实现了较高的吞吐量。
		
			1.堆被划分为一组大小相同的堆区域，G1执行一个并发的全局标记阶段，以确定整个堆中对象的活性。它首先收集这些空区域，这通常会产生大量的自由空间。这就是Garbage-First。顾名思义，G1将其收集和压缩活动集中在堆中可能充满可回收对象的区域，即垃圾区。G1使用暂停预测模型来满足用户定义的暂停时间目标，并根据指定的暂停时间目标选择要采集的区域数目。
		
	
			2. G1将对象从堆的一个或多个区域复制到堆上的一个区域，并在此过程中压缩和释放内存。这种撤离在多处理器上并行执行，以减少暂停时间和提高吞吐量。
			
		比较
			G1是 CMS的长期替代品，一个不同之处在于 G1是一个压缩收集器
 